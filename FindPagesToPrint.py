'''
###############################################################################
#Author: Chance Reimer
#Purpose: Looks into the printout of a dump_data pdfk and sees if a certain
value is found as a bookmark name,
'''
import os
import traceback

#
bookmark_page_sig = "BookmarkPageNumber:"
num_PagesString = "NumberOfPages:"

class PDF_Book_Mark_Parser:

    #Should take the filename, as in "Somename.pdf", and directory "C:\\something\\"
    #The directory will contain all of the files generated by the PrintBookmarks Script
    def __init__(self, directory_Bookmarks, fileName_PDF, searchValue):
        self.directory = directory_Bookmarks
        self.fileName = fileName_PDF[:-4]+".txt" #we don't want the ending of the filename filepath
        self.Bookmark = searchValue
        self.Full_Path = os.path.join(self.directory, self.fileName)
        self.Bookmark = searchValue

        #initialized values
        self.page_Start = 0
        self.page_End = 0
        self.numPages = 0

    def find_Page_Numbers(self):
        if not self.is_file_Valid():
            raise NameError("File path is invalid")
            return -1

        flagBegin = False
        count = 0
        with open(self.Full_Path, "r") as file:
            for line in file:
                if flagBegin:
                    if count == 1:
                        if(bookmark_page_sig in line):
                            self.page_Start = int(line.replace(bookmark_page_sig, "")[1:])  #get rid of space
                            print("Start of bookmark: {0}".format(self.page_Start))
                        else:
                            raise NameError("No Bookmarks in line, was Expected.\nLine: {0}".format(line))
                            return
                    elif count == 5:
                        if(bookmark_page_sig in line):
                            self.page_End = int(line.replace(bookmark_page_sig, "")[1:])  #get rid of space
                            print("End of pages: {0}".format(self.page_End))
                            return
                        else:
                            self.page_End = 5 if ((self.numPages-self.page_Start > 5)) else self.numPages-self.page_Start
                            print("Expecting signifier, assuming worst condition and printing max {0} to print.\nLine: {1}".format(line))
                            return
                    count+=1

                if num_PagesString in line:
                    self.numPages = int(line.replace(num_PagesString, "")[1:])
                    print("Number Of Pages of Document: {0}".format(self.numPages))

                if self.Bookmark in line: #We found the line of our bookmark/We know it is unique
                    flagBegin = True
            #if we read the whole file without finding the bookmark we are looking for
            raise NameError("BOOKMARK NOT FOUND: {0}".format(self.Bookmark))
            return

    def is_file_Valid(self):
        return os.path.isfile(os.path.join(self.directory, self.fileName))

    def gen_Print_List_Range(self):
        returnString =""
        for i in range(self.page_Start, self.page_End+1):
            returnString+= "A{0} ".format(i)
        print(returnString)
        return returnString

    def gen_Mod_Print(self):
        returnString = ""
        for i in range(self.page_Start, self.page_Start+1):  #We only print the one
            returnString += "A{0} ".format(i)
        print(returnString)
        return returnString

if __name__ == "__main__":
    exDir = "C:\\SomePath"
    exFile = "SomeFile.pdf"
    exSearch = "SomeBookmark"
    ex = PDF_Book_Mark_Parser(exDir, exFile, exSearch)
    ex.find_Page_Numbers()
